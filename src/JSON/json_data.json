{"id": 1, "author": "Javier Tobajas Blanco", "stored_in": "TimeScaleDB", "createdAt": "2017-04-21", "description": "This data represent the different hourly recorded data from 2017-04-21 23:00:00 to 2022-01-31 23:00:00 from the Hospital", "number_instances": 29756, "number__attributes": 2, "attributes": [{"id_attribute": 1, "name": "datetime_per_hour", "description": "This attribute represent the time column", "typeA": "Temporal", "missing": 0, "distinct": 29756, "unique": 29756, "applied_techniques": []}, {"id_attribute": 2, "name": "g1", "description": "This attribute represent the gas energy consumption of boiler 1 column", "typeA": "Numerical", "missing": 8382, "distinct": 13144, "unique": 13144, "stats": [{"id_stat": 1, "typeS": "Min", "value": 129574.54}, {"id_stat": 2, "typeS": "Max", "value": 261428.53}, {"id_stat": 3, "typeS": "Mean", "value": 180412.02492692237}, {"id_stat": 4, "typeS": "stdDev", "value": 40687.40286414441}], "applied_techniques": [{"id_technique": 3, "typeT": "Transformation", "name": "from m3 to MwH", "documentation": "Custom", "others": "Transform data from m3 to MwH by using: value * 1.02264*40/3.6/1000", "parameters": []}, {"id_technique": 4, "typeT": "Data Cleaning", "name": "interpolate()", "documentation": "\n        Fill NaN values using an interpolation method.\n\n        Please note that only ``method='linear'`` is supported for\n        DataFrame/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : str, default 'linear'\n            Interpolation technique to use. One of:\n\n            * 'linear': Ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n            * 'time': Works on daily and higher resolution data to interpolate\n              given length of interval.\n            * 'index', 'values': use the actual numerical values of the index.\n            * 'pad': Fill in NaNs using existing values.\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'spline',\n              'barycentric', 'polynomial': Passed to\n              `scipy.interpolate.interp1d`. These methods use the numerical\n              values of the index.  Both 'polynomial' and 'spline' require that\n              you also specify an `order` (int), e.g.\n              ``df.interpolate(method='polynomial', order=5)``.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',\n              'cubicspline': Wrappers around the SciPy interpolation methods of\n              similar names. See `Notes`.\n            * 'from_derivatives': Refers to\n              `scipy.interpolate.BPoly.from_derivatives` which\n              replaces 'piecewise_polynomial' interpolation method in\n              scipy 0.18.\n\n        axis : {{0 or 'index', 1 or 'columns', None}}, default None\n            Axis to interpolate along.\n        limit : int, optional\n            Maximum number of consecutive NaNs to fill. Must be greater than\n            0.\n        inplace : bool, default False\n            Update the data in place if possible.\n        limit_direction : {{'forward', 'backward', 'both'}}, Optional\n            Consecutive NaNs will be filled in this direction.\n\n            If limit is specified:\n                * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.\n                * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be\n                  'backwards'.\n\n            If 'limit' is not specified:\n                * If 'method' is 'backfill' or 'bfill', the default is 'backward'\n                * else the default is 'forward'\n\n            .. versionchanged:: 1.1.0\n                raises ValueError if `limit_direction` is 'forward' or 'both' and\n                    method is 'backfill' or 'bfill'.\n                raises ValueError if `limit_direction` is 'backward' or 'both' and\n                    method is 'pad' or 'ffill'.\n\n        limit_area : {{`None`, 'inside', 'outside'}}, default None\n            If limit is specified, consecutive NaNs will be filled with this\n            restriction.\n\n            * ``None``: No fill restriction.\n            * 'inside': Only fill NaNs surrounded by valid values\n              (interpolate).\n            * 'outside': Only fill NaNs outside valid values (extrapolate).\n\n        downcast : optional, 'infer' or None, defaults to None\n            Downcast dtypes if possible.\n        ``**kwargs`` : optional\n            Keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame or None\n            Returns the same object type as the caller, interpolated at\n            some or all ``NaN`` values or None if ``inplace=True``.\n\n        See Also\n        --------\n        fillna : Fill missing values using different methods.\n        scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials\n            (Akima interpolator).\n        scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the\n            Bernstein basis.\n        scipy.interpolate.interp1d : Interpolate a 1-D function.\n        scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh\n            interpolator).\n        scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic\n            interpolation.\n        scipy.interpolate.CubicSpline : Cubic spline data interpolator.\n\n        Notes\n        -----\n        The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n        methods are wrappers around the respective SciPy implementations of\n        similar names. These use the actual numerical values of the index.\n        For more information on their behavior, see the\n        `SciPy documentation\n        <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\n        and `SciPy tutorial\n        <https://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__.\n\n        Examples\n        --------\n        Filling in ``NaN`` in a :class:`~pandas.Series` via linear\n        interpolation.\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s\n        0    0.0\n        1    1.0\n        2    NaN\n        3    3.0\n        dtype: float64\n        >>> s.interpolate()\n        0    0.0\n        1    1.0\n        2    2.0\n        3    3.0\n        dtype: float64\n\n        Filling in ``NaN`` in a Series by padding, but filling at most two\n        consecutive ``NaN`` at a time.\n\n        >>> s = pd.Series([np.nan, \"single_one\", np.nan,\n        ...                \"fill_two_more\", np.nan, np.nan, np.nan,\n        ...                4.71, np.nan])\n        >>> s\n        0              NaN\n        1       single_one\n        2              NaN\n        3    fill_two_more\n        4              NaN\n        5              NaN\n        6              NaN\n        7             4.71\n        8              NaN\n        dtype: object\n        >>> s.interpolate(method='pad', limit=2)\n        0              NaN\n        1       single_one\n        2       single_one\n        3    fill_two_more\n        4    fill_two_more\n        5    fill_two_more\n        6              NaN\n        7             4.71\n        8             4.71\n        dtype: object\n\n        Filling in ``NaN`` in a Series via polynomial interpolation or splines:\n        Both 'polynomial' and 'spline' methods require that you also specify\n        an ``order`` (int).\n\n        >>> s = pd.Series([0, 2, np.nan, 8])\n        >>> s.interpolate(method='polynomial', order=2)\n        0    0.000000\n        1    2.000000\n        2    4.666667\n        3    8.000000\n        dtype: float64\n\n        Fill the DataFrame forward (that is, going down) along each column\n        using linear interpolation.\n\n        Note how the last entry in column 'a' is interpolated differently,\n        because there is no entry after it to use for interpolation.\n        Note how the first entry in column 'b' remains ``NaN``, because there\n        is no entry before it to use for interpolation.\n\n        >>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),\n        ...                    (np.nan, 2.0, np.nan, np.nan),\n        ...                    (2.0, 3.0, np.nan, 9.0),\n        ...                    (np.nan, 4.0, -4.0, 16.0)],\n        ...                   columns=list('abcd'))\n        >>> df\n             a    b    c     d\n        0  0.0  NaN -1.0   1.0\n        1  NaN  2.0  NaN   NaN\n        2  2.0  3.0  NaN   9.0\n        3  NaN  4.0 -4.0  16.0\n        >>> df.interpolate(method='linear', limit_direction='forward', axis=0)\n             a    b    c     d\n        0  0.0  NaN -1.0   1.0\n        1  1.0  2.0 -2.0   5.0\n        2  2.0  3.0 -3.0   9.0\n        3  2.0  4.0 -4.0  16.0\n\n        Using polynomial interpolation.\n\n        >>> df['d'].interpolate(method='polynomial', order=2)\n        0     1.0\n        1     4.0\n        2     9.0\n        3    16.0\n        Name: d, dtype: float64\n        ", "others": null, "parameters": [{"id_param": 1, "name": "method", "value": "time", "others": null}, {"id_param": 2, "name": "limit_direction", "value": "forward", "others": null}, {"id_param": 3, "name": "axis", "value": "0", "others": null}]}, {"id_technique": 5, "typeT": "Transformation", "name": "diff()", "documentation": "\n    Calculate the n-th discrete difference along the given axis.\n\n    The first difference is given by ``out[i] = a[i+1] - a[i]`` along\n    the given axis, higher differences are calculated by using `diff`\n    recursively.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n    n : int, optional\n        The number of times values are differenced. If zero, the input\n        is returned as-is.\n    axis : int, optional\n        The axis along which the difference is taken, default is the\n        last axis.\n    prepend, append : array_like, optional\n        Values to prepend or append to `a` along axis prior to\n        performing the difference.  Scalar values are expanded to\n        arrays with length 1 in the direction of axis and the shape\n        of the input array in along all other axes.  Otherwise the\n        dimension and shape must match `a` except along axis.\n\n        .. versionadded:: 1.16.0\n\n    Returns\n    -------\n    diff : ndarray\n        The n-th differences. The shape of the output is the same as `a`\n        except along `axis` where the dimension is smaller by `n`. The\n        type of the output is the same as the type of the difference\n        between any two elements of `a`. This is the same as the type of\n        `a` in most cases. A notable exception is `datetime64`, which\n        results in a `timedelta64` output array.\n\n    See Also\n    --------\n    gradient, ediff1d, cumsum\n\n    Notes\n    -----\n    Type is preserved for boolean arrays, so the result will contain\n    `False` when consecutive elements are the same and `True` when they\n    differ.\n\n    For unsigned integer arrays, the results will also be unsigned. This\n    should not be surprising, as the result is consistent with\n    calculating the difference directly:\n\n    >>> u8_arr = np.array([1, 0], dtype=np.uint8)\n    >>> np.diff(u8_arr)\n    array([255], dtype=uint8)\n    >>> u8_arr[1,...] - u8_arr[0,...]\n    255\n\n    If this is not desirable, then the array should be cast to a larger\n    integer type first:\n\n    >>> i16_arr = u8_arr.astype(np.int16)\n    >>> np.diff(i16_arr)\n    array([-1], dtype=int16)\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 4, 7, 0])\n    >>> np.diff(x)\n    array([ 1,  2,  3, -7])\n    >>> np.diff(x, n=2)\n    array([  1,   1, -10])\n\n    >>> x = np.array([[1, 3, 6, 10], [0, 5, 6, 8]])\n    >>> np.diff(x)\n    array([[2, 3, 4],\n           [5, 1, 2]])\n    >>> np.diff(x, axis=0)\n    array([[-1,  2,  0, -2]])\n\n    >>> x = np.arange('1066-10-13', '1066-10-16', dtype=np.datetime64)\n    >>> np.diff(x)\n    array([1, 1], dtype='timedelta64[D]')\n\n    ", "others": null, "parameters": []}, {"id_technique": 6, "typeT": "Data Cleaning", "name": "Handle global outliers.", "documentation": "Custom", "others": "Remove the top 5 outliers which were judged as global outliers. \n After that we replace them with the average value of the corresponding day.", "parameters": []}, {"id_technique": 6, "typeT": "Data Cleaning", "name": "Handle negative values.", "documentation": "Custom", "others": "Replace the negative values by the value of the hour before it.", "parameters": []}]}], "applied_techniques": [{"id_technique": 1, "typeT": "Transformation", "name": "sort_index()", "documentation": "\n        Sort object by labels (along an axis).\n\n        Returns a new DataFrame sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original DataFrame and returns None.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis along which to sort.  The value 0 identifies the rows,\n            and 1 identifies the columns.\n        level : int or level name or list of ints or list of level names\n            If not None, sort on values in specified index level(s).\n        ascending : bool or list-like of bools, default True\n            Sort ascending vs. descending. When the index is a MultiIndex the\n            sort direction can be controlled for each level individually.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also ndarray.np.sort for more\n            information.  `mergesort` is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n        ignore_index : bool, default False\n            If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n            .. versionadded:: 1.0.0\n\n        key : callable, optional\n            If not None, apply the key function to the index values\n            before sorting. This is similar to the `key` argument in the\n            builtin :meth:`sorted` function, with the notable difference that\n            this `key` function should be *vectorized*. It should expect an\n            ``Index`` and return an ``Index`` of the same shape. For MultiIndex\n            inputs, the key is applied *per level*.\n\n            .. versionadded:: 1.1.0\n\n        Returns\n        -------\n        DataFrame or None\n            The original DataFrame sorted by the labels or None if ``inplace=True``.\n\n        See Also\n        --------\n        Series.sort_index : Sort Series by the index.\n        DataFrame.sort_values : Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],\n        ...                   columns=['A'])\n        >>> df.sort_index()\n             A\n        1    4\n        29   2\n        100  1\n        150  5\n        234  3\n\n        By default, it sorts in ascending order, to sort in descending order,\n        use ``ascending=False``\n\n        >>> df.sort_index(ascending=False)\n             A\n        234  3\n        150  5\n        100  1\n        29   2\n        1    4\n\n        A key function can be specified which is applied to the index before\n        sorting. For a ``MultiIndex`` this is applied to each level separately.\n\n        >>> df = pd.DataFrame({\"a\": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])\n        >>> df.sort_index(key=lambda x: x.str.lower())\n           a\n        A  1\n        b  2\n        C  3\n        d  4\n        ", "others": null, "parameters": []}, {"id_technique": 2, "typeT": "Data Cleaning", "name": "loc()", "documentation": "\n        Access a group of rows and columns by label(s) or a boolean array.\n\n        ``.loc[]`` is primarily label based, but may also be used with a\n        boolean array.\n\n        Allowed inputs are:\n\n        - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n          interpreted as a *label* of the index, and **never** as an\n          integer position along the index).\n        - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n        - A slice object with labels, e.g. ``'a':'f'``.\n\n          .. warning:: Note that contrary to usual python slices, **both** the\n              start and the stop are included\n\n        - A boolean array of the same length as the axis being sliced,\n          e.g. ``[True, False, True]``.\n        - An alignable boolean Series. The index of the key will be aligned before\n          masking.\n        - An alignable Index. The Index of the returned selection will be the input.\n        - A ``callable`` function with one argument (the calling Series or\n          DataFrame) and that returns valid output for indexing (one of the above)\n\n        See more at :ref:`Selection by Label <indexing.label>`.\n\n        Raises\n        ------\n        KeyError\n            If any items are not found.\n        IndexingError\n            If an indexed key is passed and its index is unalignable to the frame index.\n\n        See Also\n        --------\n        DataFrame.at : Access a single value for a row/column label pair.\n        DataFrame.iloc : Access group of rows and columns by integer position(s).\n        DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n            Series/DataFrame.\n        Series.loc : Access group of values using labels.\n\n        Examples\n        --------\n        **Getting values**\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=['cobra', 'viper', 'sidewinder'],\n        ...      columns=['max_speed', 'shield'])\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4       5\n        sidewinder          7       8\n\n        Single label. Note this returns the row as a Series.\n\n        >>> df.loc['viper']\n        max_speed    4\n        shield       5\n        Name: viper, dtype: int64\n\n        List of labels. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[['viper', 'sidewinder']]\n                    max_speed  shield\n        viper               4       5\n        sidewinder          7       8\n\n        Single label for row and column\n\n        >>> df.loc['cobra', 'shield']\n        2\n\n        Slice with labels for row and single label for column. As mentioned\n        above, note that both the start and stop of the slice are included.\n\n        >>> df.loc['cobra':'viper', 'max_speed']\n        cobra    1\n        viper    4\n        Name: max_speed, dtype: int64\n\n        Boolean list with the same length as the row axis\n\n        >>> df.loc[[False, False, True]]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Alignable boolean Series:\n\n        >>> df.loc[pd.Series([False, True, False],\n        ...        index=['viper', 'sidewinder', 'cobra'])]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Index (same behavior as ``df.reindex``)\n\n        >>> df.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n               max_speed  shield\n        foo\n        cobra          1       2\n        viper          4       5\n\n        Conditional that returns a boolean Series\n\n        >>> df.loc[df['shield'] > 6]\n                    max_speed  shield\n        sidewinder          7       8\n\n        Conditional that returns a boolean Series with column labels specified\n\n        >>> df.loc[df['shield'] > 6, ['max_speed']]\n                    max_speed\n        sidewinder          7\n\n        Callable that returns a boolean Series\n\n        >>> df.loc[lambda df: df['shield'] == 8]\n                    max_speed  shield\n        sidewinder          7       8\n\n        **Setting values**\n\n        Set value for all items matching the list of labels\n\n        >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n        >>> df\n                    max_speed  shield\n        cobra               1       2\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire row\n\n        >>> df.loc['cobra'] = 10\n        >>> df\n                    max_speed  shield\n        cobra              10      10\n        viper               4      50\n        sidewinder          7      50\n\n        Set value for an entire column\n\n        >>> df.loc[:, 'max_speed'] = 30\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper              30      50\n        sidewinder         30      50\n\n        Set value for rows matching callable condition\n\n        >>> df.loc[df['shield'] > 35] = 0\n        >>> df\n                    max_speed  shield\n        cobra              30      10\n        viper               0       0\n        sidewinder          0       0\n\n        **Getting values on a DataFrame with an index that has integer labels**\n\n        Another example using integers for the index\n\n        >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n        ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n        >>> df\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        Slice with integer labels for rows. As mentioned above, note that both\n        the start and stop of the slice are included.\n\n        >>> df.loc[7:9]\n           max_speed  shield\n        7          1       2\n        8          4       5\n        9          7       8\n\n        **Getting values with a MultiIndex**\n\n        A number of examples using a DataFrame with a MultiIndex\n\n        >>> tuples = [\n        ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n        ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n        ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n        ... ]\n        >>> index = pd.MultiIndex.from_tuples(tuples)\n        >>> values = [[12, 2], [0, 4], [10, 20],\n        ...         [1, 4], [7, 1], [16, 36]]\n        >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n        >>> df\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Single label. Note this returns a DataFrame with a single index.\n\n        >>> df.loc['cobra']\n                 max_speed  shield\n        mark i          12       2\n        mark ii          0       4\n\n        Single index tuple. Note this returns a Series.\n\n        >>> df.loc[('cobra', 'mark ii')]\n        max_speed    0\n        shield       4\n        Name: (cobra, mark ii), dtype: int64\n\n        Single label for row and column. Similar to passing in a tuple, this\n        returns a Series.\n\n        >>> df.loc['cobra', 'mark i']\n        max_speed    12\n        shield        2\n        Name: (cobra, mark i), dtype: int64\n\n        Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n        >>> df.loc[[('cobra', 'mark ii')]]\n                       max_speed  shield\n        cobra mark ii          0       4\n\n        Single tuple for the index with a single label for the column\n\n        >>> df.loc[('cobra', 'mark i'), 'shield']\n        2\n\n        Slice from index tuple to single label\n\n        >>> df.loc[('cobra', 'mark i'):'viper']\n                             max_speed  shield\n        cobra      mark i           12       2\n                   mark ii           0       4\n        sidewinder mark i           10      20\n                   mark ii           1       4\n        viper      mark ii           7       1\n                   mark iii         16      36\n\n        Slice from index tuple to index tuple\n\n        >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                            max_speed  shield\n        cobra      mark i          12       2\n                   mark ii          0       4\n        sidewinder mark i          10      20\n                   mark ii          1       4\n        viper      mark ii          7       1\n        ", "others": null, "parameters": []}, {"id_technique": 7, "typeT": "Data Cleaning", "name": "dropna()", "documentation": "\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. versionchanged:: 1.0.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame or None\n            DataFrame with NA entries dropped from it or None if ``inplace=True``.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'toy'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        ", "others": null, "parameters": []}]}